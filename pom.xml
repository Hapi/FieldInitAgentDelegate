<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.hapiware.agent</groupId>
	<artifactId>field-init-agent-delegate</artifactId>
	<version>1.0.0</version>
	<description>
		'field-init-agent-delegate' can be used to set initial values for member variables
		without touching the source code of the target class. This is useful for testing
		purpouses where some specific initial values may be required instead of the default
		values.
		
		For testing see profile comments. 
	</description>
	<licenses>
		<license>
			<name>MIT License</name>
			<url>http://github.com/Hapi/field-init-agent-delegate/raw/master/src/main/resources/LICENSE</url>
			<distribution>repo</distribution>
		</license>
	</licenses>
	<scm>
		<url>http://github.com/Hapi/field-init-agent-delegate</url>
		<connection>scm:git:http://github.com/Hapi/field-init-agent-delegate</connection>
	</scm>
	<developers>
		<developer>
			<id>hapi</id>
			<name>Hapi</name>
			<email>hapi@hapiware.com</email>
		</developer>
	</developers>
	
	<properties>
		<java.agent.version>2.1.1</java.agent.version>
	</properties>
	
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.5</source>
					<target>1.5</target>
				</configuration>
			</plugin>
			<plugin>
				<inherited>true</inherited>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<executions>
					<execution>
						<id>attach</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
 						<manifestEntries>
							<Implementation-Title>${build.finalName}</Implementation-Title> 
							<Implementation-Version>${project.version}</Implementation-Version>
							<Implementation-Vendor>http://www.hapiware.com</Implementation-Vendor>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
		</plugins>
		<testResources>
			<testResource>
				<directory>src/test/resources/filtered</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>
	</build>
	
	<dependencies>
		<dependency>
			<groupId>asm</groupId>
			<artifactId>asm-all</artifactId>
			<version>3.3</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>[4.0,)</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<reporting>
	    <outputDirectory>target/site</outputDirectory>
	    <plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jxr-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<configuration>
					<targetJdk>1.5</targetJdk>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<configuration>
				  <maxmemory>1024m</maxmemory>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<configuration>
					<threshold>Normal</threshold>
				</configuration>
			</plugin>
		</plugins>
	</reporting>
	
	<distributionManagement>
		<repository>
			<id>hapiware-repo</id>
			<url>scp://hapi.github.com/maven2</url>
		</repository>
	</distributionManagement>
	
	<profiles>
		<profile>
			<id>sign-artifacts</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<!--
								ManipulatedAgentTest.java must be tested separately after making
								a package. See a profile named 'test-agent'.
							-->
							<excludes>
								<exclude>**/ManipulatedAgentTest.java</exclude>
							</excludes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		
		<profile>
			<!--
				Runs all the other tests except those where byte code manipulation is to happen.
				For details see profile 'test-agent'.
			-->
			<id>test-unmanipulated</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<!--
								ManipulatedAgentTest.java must be tested separately after making
								a package. See a profile named 'test-agent'.
							-->
							<excludes>
								<exclude>**/ManipulatedAgentTest.java</exclude>
							</excludes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<!--
				This profile is to be used to prove that the byte code manipulation works as
				expected. Follow these steps:
				
					1. Run mvn clean install (or mvn clean package)
					2. Run mvn test -P test-agent
					
				The first command builds the agent delegate to be used in the second step and
				thus you _must not use 'clean' command in the second step_.
			-->
			<id>test-agent</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<excludes>
								<exclude>**/UnmanipulatedAgentTest.java</exclude>
							</excludes>
							<includes>
								<include>**/ManipulatedAgentTest.java</include>
							</includes>
							<argLine>-javaagent:${settings.localRepository}/com/hapiware/agent/agent/${java.agent.version}/agent-${java.agent.version}.jar=${project.build.directory}/test-classes/field-init-agent-config.xml</argLine>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
